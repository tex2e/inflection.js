// Generated by CoffeeScript 1.10.0
(function() {
  var Inflections, Inflector, apply_inflections, pluralize, singularize,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Inflections = (function() {
    var _delete_element;

    function Inflections() {
      this.plurals = [];
      this.singulars = [];
      this.uncountables = [];
    }

    Inflections.prototype.plural = function(rule, replacement) {
      _delete_element(this.uncountables, rule);
      _delete_element(this.uncountables, replacement);
      return this.plurals.splice(0, 0, [rule, replacement]);
    };

    Inflections.prototype.singular = function(rule, replacement) {
      _delete_element(this.uncountables, rule);
      _delete_element(this.uncountables, replacement);
      return this.singulars.splice(0, 0, [rule, replacement]);
    };

    Inflections.prototype.irregular = function(singular, plural) {
      var p0, prest, s0, srest;
      _delete_element(this.uncountables, singular);
      _delete_element(this.uncountables, plural);
      s0 = singular[0];
      srest = singular.slice(1);
      p0 = plural[0];
      prest = plural.slice(1);
      if (s0.toUpperCase() === p0.toUpperCase()) {
        this.plural(RegExp("(" + s0 + ")" + srest + "$", "i"), '$1' + prest);
        this.plural(RegExp("(" + p0 + ")" + prest + "$", "i"), '$1' + prest);
        this.singular(RegExp("(" + s0 + ")" + srest + "$", "i"), '$1' + srest);
        return this.singular(RegExp("(" + p0 + ")" + prest + "$", "i"), '$1' + srest);
      } else {
        this.plural(RegExp((s0.toUpperCase()) + "(?i)" + srest + "$"), p0.toUpperCase() + prest);
        this.plural(RegExp((s0.toLowerCase()) + "(?i)" + srest + "$"), p0.toLowerCase() + prest);
        this.plural(RegExp((p0.toUpperCase()) + "(?i)" + prest + "$"), p0.toUpperCase() + prest);
        this.plural(RegExp((p0.toLowerCase()) + "(?i)" + prest + "$"), p0.toLowerCase() + prest);
        this.singular(RegExp((s0.toUpperCase()) + "(?i)" + srest + "$"), s0.toUpperCase() + srest);
        this.singular(RegExp((s0.toLowerCase()) + "(?i)" + srest + "$"), s0.toLowerCase() + srest);
        this.singular(RegExp((p0.toUpperCase()) + "(?i)" + prest + "$"), s0.toUpperCase() + srest);
        return this.singular(RegExp((p0.toLowerCase()) + "(?i)" + prest + "$"), s0.toLowerCase() + srest);
      }
    };

    Inflections.prototype.uncountable = function() {
      var words;
      words = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return Array.prototype.push.apply(this.uncountables, words);
    };

    _delete_element = function(array, entry) {
      var entry_index;
      entry_index = array.indexOf(entry);
      if (entry_index === -1) {
        return null;
      }
      return array.splice(entry_index, entry_index);
    };

    return Inflections;

  })();

  Inflector = (function() {
    function Inflector() {}

    Inflector.__instance__ = new Inflections;

    Inflector.inflections = function(func) {
      return func.call(null, Inflector.__instance__);
    };

    Inflector.inflection = function() {
      return Inflector.__instance__;
    };

    return Inflector;

  })();

  apply_inflections = function(word, rules) {
    var i, len, replacement;
    if (indexOf.call(Inflector.inflection().uncountables, word) >= 0) {
      return word;
    }
    for (i = 0, len = rules.length; i < len; i++) {
      replacement = rules[i];
      if (word.match(replacement[0])) {
        return word.replace(replacement[0], replacement[1]);
      }
    }
  };

  pluralize = function(word) {
    return apply_inflections(word, Inflector.inflection().plurals);
  };

  singularize = function(word) {
    return apply_inflections(word, Inflector.inflection().singulars);
  };

  Inflector.inflections(function(inflect) {
    inflect.plural(/$/, "s");
    inflect.plural(/s$/i, "s");
    inflect.plural(/^(ax|test)is$/i, '$1es');
    inflect.plural(/(octop|vir)us$/i, '$1i');
    inflect.plural(/(octop|vir)i$/i, '$1i');
    inflect.plural(/(alias|status)$/i, '$1es');
    inflect.plural(/(bu)s$/i, '$1ses');
    inflect.plural(/(buffal|tomat)o$/i, '$1oes');
    inflect.plural(/([ti])um$/i, '$1a');
    inflect.plural(/([ti])a$/i, '$1a');
    inflect.plural(/sis$/i, "ses");
    inflect.plural(/(?:([^f])fe|([lr])f)$/i, '$1$2ves');
    inflect.plural(/(hive)$/i, '$1s');
    inflect.plural(/([^aeiouy]|qu)y$/i, '$1ies');
    inflect.plural(/(x|ch|ss|sh)$/i, '$1es');
    inflect.plural(/(matr|vert|ind)(?:ix|ex)$/i, '$1ices');
    inflect.plural(/^(m|l)ouse$/i, '$1ice');
    inflect.plural(/^(m|l)ice$/i, '$1ice');
    inflect.plural(/^(ox)$/i, '$1en');
    inflect.plural(/^(oxen)$/i, '$1');
    inflect.plural(/(quiz)$/i, '$1zes');
    inflect.singular(/$/, "");
    inflect.singular(/s$/i, "");
    inflect.singular(/(ss)$/i, '$1');
    inflect.singular(/(n)ews$/i, '$1ews');
    inflect.singular(/([ti])a$/i, '$1um');
    inflect.singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis');
    inflect.singular(/(^analy)(sis|ses)$/i, '$1sis');
    inflect.singular(/([^f])ves$/i, '$1fe');
    inflect.singular(/(hive)s$/i, '$1');
    inflect.singular(/(tive)s$/i, '$1');
    inflect.singular(/([lr])ves$/i, '$1f');
    inflect.singular(/([^aeiouy]|qu)ies$/i, '$1y');
    inflect.singular(/(s)eries$/i, '$1eries');
    inflect.singular(/(m)ovies$/i, '$1ovie');
    inflect.singular(/(x|ch|ss|sh)es$/i, '$1');
    inflect.singular(/^(m|l)ice$/i, '$1ouse');
    inflect.singular(/(bus)(es)?$/i, '$1');
    inflect.singular(/(o)es$/i, '$1');
    inflect.singular(/(shoe)s$/i, '$1');
    inflect.singular(/(cris|test)(is|es)$/i, '$1is');
    inflect.singular(/^(a)x[ie]s$/i, '$1xis');
    inflect.singular(/(octop|vir)(us|i)$/i, '$1us');
    inflect.singular(/(alias|status)(es)?$/i, '$1');
    inflect.singular(/^(ox)en/i, '$1');
    inflect.singular(/(vert|ind)ices$/i, '$1ex');
    inflect.singular(/(matr)ices$/i, '$1ix');
    inflect.singular(/(quiz)zes$/i, '$1');
    inflect.singular(/(database)s$/i, '$1');
    inflect.irregular("person", "people");
    inflect.irregular("man", "men");
    inflect.irregular("child", "children");
    inflect.irregular("sex", "sexes");
    inflect.irregular("move", "moves");
    inflect.irregular("zombie", "zombies");
    return inflect.uncountable("equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police");
  });

}).call(this);
